# Working example showing how to use nextest to reuse builds and partition test runs on GitHub Actions.
# See workflow runs at https://github.com/nextest-rs/reuse-build-partition-example/actions/workflows/ci.yml.
name: Rust_CI

on:
  push:
    branches: ["master"]
    paths-ignore:
      - "src/**"
      - "package.json"
      - "package-lock.json"
      - "yarn.lock"
      - "pnpm-lock.yaml"
      - "README.md"
  pull_request:
    branches: ["master"]
    paths-ignore:
      - "src/**"
      - "package.json"
      - "package-lock.json"
      - "yarn.lock"
      - "pnpm-lock.yaml"
      - "README.md"

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  build_cache:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/cache_cargo
      - name: build
        run: cargo build
        working-directory: src-tauri

  build:
    needs: build_cache

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Disable git core.autocrlf on Windows
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install libdbus-1-dev libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Create empty 'out' directory
        run: mkdir out
      - name: Create empty 'out' directory
        run: mkdir dist

      - name: Run rustfmt check
        run: cargo fmt --all -- --check
        working-directory: src-tauri

      # - name: Run clippy check and deny warnings
      #   run: cargo clippy --all-targets --all-features
      #   working-directory: src-tauri
      - name: Run cargo test
        run: cargo test
        working-directory: src-tauri
